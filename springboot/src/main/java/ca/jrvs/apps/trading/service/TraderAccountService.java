package ca.jrvs.apps.trading.service;

import ca.jrvs.apps.trading.dao.AccountDao;
import ca.jrvs.apps.trading.dao.PositionDao;
import ca.jrvs.apps.trading.dao.SecurityOrderDao;
import ca.jrvs.apps.trading.dao.TraderDao;
import ca.jrvs.apps.trading.model.domain.Account;
import ca.jrvs.apps.trading.model.domain.Position;
import ca.jrvs.apps.trading.model.domain.SecurityOrder;
import ca.jrvs.apps.trading.model.domain.Trader;
import ca.jrvs.apps.trading.view.TraderAccountView;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class TraderAccountService {

    private final TraderDao traderDao;
    private final AccountDao accountDao;
    private final SecurityOrderDao securityOrderDao;
    private final PositionDao positionDao;

    @Autowired
    public TraderAccountService(TraderDao traderDao, AccountDao accountDao,
                                SecurityOrderDao securityOrderDao, PositionDao positionDao) {
        this.traderDao = traderDao;
        this.accountDao = accountDao;
        this.securityOrderDao = securityOrderDao;
        this.positionDao = positionDao;
    }

    /**
     * Create a new trader and initialize a new account with 0 amount.
     * - validate user input (all fields must be non empty)
     * - create a trader
     * - create an account
     * - create, setup, and return a new TraderAccountView
     * <p>
     * Assumption: each trader has only one account where traderId == accountId
     *
     * @param trader cannot be null. All fields cannot be null except id (auto-generated by database)
     * @return traderAccountView
     * @throws IllegalArgumentException if a trader has null fields or id is not null
     */
    public TraderAccountView createTraderAndAccount(Trader trader) {
        // validating user input and push into database.
        boolean validated = trader == null || (trader.getLastName() != null
                && trader.getFirstName() != null && trader.getCountry() != null
                && trader.getDob() != null && trader.getEmail() != null);
        if (!validated) {
            throw new IllegalArgumentException("error: input trader is invalid (all fields must not be" +
                    " null except id).");
        }
        Trader savedTrader = traderDao.save(trader);

        // create an account for the trader.
        Account account = new Account();
        account.setTraderId(trader.getId());
        account.setAmount(0);
        Account savedAccount = accountDao.save(account);

        return new TraderAccountView(savedTrader, savedAccount);
    }

    /**
     * A trader can be deleted iff it has no open position and 0 cash balance
     *  - validate traderId
     *  - get trader account by traderId and check account balance
     *  - get positions by accountId and check position
     *  - delete all securityOrders, account, and trader (in this order)
     * @param traderId must not be null
     * @throws IllegalArgumentException if traderId is null or not found or unable to retrieve
     */
    public void deleteTraderById(Integer traderId) {
        // validate input traderId and trader.
        if (traderId == null) {
            throw new IllegalArgumentException("error: input traderId cannot be null.");
        }
        Optional<Trader> trader = traderDao.findById(traderId);
        if (!trader.isPresent()) {
            throw new IllegalArgumentException("error: trader with id [" + traderId + "] not found in table trader.");
        }

        // find account and positions, only delete when criteria are met.
        Account traderAccount = ((List<Account>) accountDao.findAccountByTraderId(traderId)).get(0);
        List<Position> traderPositions = (List<Position>) positionDao
                .findAllPositionsByAccountId(traderAccount.getId());
        if (traderAccount.getAmount() == 0 && traderPositions.size() == 0) {
            List<SecurityOrder> allOrders = (List<SecurityOrder>) securityOrderDao
                    .findAllOrdersById(traderAccount.getId());
            allOrders.forEach(x -> securityOrderDao.deleteById(x.getId()));
            accountDao.deleteById(traderAccount.getId());
            traderDao.deleteById(trader.get().getId());
        } else {
            throw new IllegalArgumentException("error: trader cannot be deleted. Current account amount: " +
                    traderAccount.getAmount() +
                    ", current number of positions: " + traderPositions.size() + ".");
        }
    }

    /**
     * Deposit a fund to an account by traderId
     *  - validate user input
     *  - account = accountDao.findByTraderId()
     *  - accountDao.updateAmountById()
     *
     * @param traderId must not be null
     * @param fund must be greater than 0
     * @return updated Account
     * @throws IllegalArgumentException if traderId is null or not found, or fund is less than or equal to 0
     */
    public Account deposit(Integer traderId, Double fund) {
        // validate input traderId and trader.
        if (traderId == null || fund <= 0) {
            throw new IllegalArgumentException("error: input traderId cannot be null, " +
                    "and fund must be greater than 0");
        }
        Optional<Trader> trader = traderDao.findById(traderId);
        if (!trader.isPresent()) {
            throw new IllegalArgumentException("error: trader with id [" + traderId + "] not found in table trader.");
        }

        // deposit fund and update account.
        Account traderAccount = ((List<Account>) accountDao.findAccountByTraderId(traderId)).get(0);
        traderAccount.setAmount(traderAccount.getAmount() + fund);
        return accountDao.save(traderAccount);
    }

    /**
     * Withdraw a fund from an account by traderId.
     *  - validate user input
     *  - account = accountDao.findByTraderId()
     *  - accountDao.updateAmountById()
     *
     * @param traderId must not be null
     * @param fund must be greater than 0
     * @return updated Account
     * @throws IllegalArgumentException if traderId is null or not found,
     *                                  and fund is less than or equal to 0, or insufficient
     */
    public Account withdraw(Integer traderId, Double fund) {
        // validate input traderId and trader.
        if (traderId == null || fund <= 0) {
            throw new IllegalArgumentException("error: input traderId cannot be null, " +
                    "and fund must be greater than 0");
        }
        Optional<Trader> trader = traderDao.findById(traderId);
        if (!trader.isPresent()) {
            throw new IllegalArgumentException("error: trader with id [" + traderId + "] not found in table trader.");
        }

        // withdraw fund and update account, and throw Exception if amount is insufficient.
        Account traderAccount = ((List<Account>) accountDao.findAccountByTraderId(traderId)).get(0);
        if (traderAccount.getAmount() < fund) {
            throw new IllegalArgumentException("error: trader with id [" + traderId
                    + "] does not have sufficient amount in his/her account.");
        }
        traderAccount.setAmount(traderAccount.getAmount() - fund);
        return accountDao.save(traderAccount);
    }
}
