package ca.jrvs.apps.trading.controller;

import ca.jrvs.apps.trading.model.domain.Account;
import ca.jrvs.apps.trading.model.domain.Trader;
import ca.jrvs.apps.trading.service.TraderAccountService;
import ca.jrvs.apps.trading.util.ResponseExceptionUtil;
import ca.jrvs.apps.trading.view.TraderAccountView;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.sql.Date;
import java.time.LocalDate;

@Api(value = "Trader", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
@Controller
@RequestMapping("/trader")
public class TraderAccountController {

    private final TraderAccountService traderAccountService;

    @Autowired
    public TraderAccountController(TraderAccountService traderAccountService) {
        this.traderAccountService = traderAccountService;
    }

    @ApiOperation(value = "Create a trader and an account.",
        notes = "TraderId and AccountId are auto-generated by the database, "
                + "and they should be identical. Assume each trader has exact one account.")
    @ResponseStatus(HttpStatus.CREATED)
    @ResponseBody
    @PostMapping(
            path = "/firstname/{firstname}/lastname/{lastname}/dob/{dob}/country/{country}/email/{email}",
            produces = {MediaType.APPLICATION_JSON_UTF8_VALUE})
    public TraderAccountView createTrader(@PathVariable String firstname, @PathVariable String lastname,
                                          @PathVariable @DateTimeFormat(pattern = "yyyy-MM-dd") LocalDate dob,
                                          @PathVariable String country, @PathVariable String email) {
        try {
            Trader trader = new Trader();
            trader.setEmail(email);
            trader.setDob(Date.valueOf(dob));
            trader.setFirstName(firstname);
            trader.setLastName(lastname);
            trader.setLastName(lastname);
            return traderAccountService.createTraderAndAccount(trader);
        } catch (Exception ex) {
            throw ResponseExceptionUtil.getResponseStatusException(ex);
        }
    }

    @ApiOperation(value = "Create a trader and an account with DTO",
            notes = "TraderId and AccountId are auto-generated by the database, "
                    + "and they should be identical. Assume each trader has exact one account.")
    @ResponseStatus(HttpStatus.CREATED)
    @ResponseBody
    @PostMapping(path = "/", produces = {MediaType.APPLICATION_JSON_UTF8_VALUE})
    public TraderAccountView createTrader(@RequestBody Trader trader) {
        try {
            return traderAccountService.createTraderAndAccount(trader);
        } catch (Exception ex) {
            throw ResponseExceptionUtil.getResponseStatusException(ex);
        }
    }

    @ApiOperation(value = "Delete a trader",
        notes = "Delete a trader IFF its account amount is 0 and no open positions."
                + " Also delete the associated account and security orders.")
    @ApiResponses(value = {@ApiResponse(code = 400, message = "Unable to delete the trader")})
    @DeleteMapping(path = "/traderId/{traderId}")
    @ResponseStatus(HttpStatus.OK)
    public void deleteTrader(@PathVariable Integer traderId) {
        try {
            traderAccountService.deleteTraderById(traderId);
        } catch (Exception ex) {
            throw ResponseExceptionUtil.getResponseStatusException(ex);
        }
    }

    @ApiOperation(value = "Deposit a fund",
            notes = "Deposit a fund from trader with id traderId's account.")
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Unable to deposit due to user input."),
            @ApiResponse(code = 404, message = "traderId is not found.")})
    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    @PutMapping(path = "/deposit/traderId/{traderId}/amount/{amount}")
    public Account depositFund(@PathVariable Integer traderId, @PathVariable Double amount) {
        try {
            return traderAccountService.deposit(traderId, amount);
        } catch (Exception ex) {
            throw ResponseExceptionUtil.getResponseStatusException(ex);
        }
    }

    @ApiOperation(value = "Withdraw a fund",
            notes = "Withdraw a fund from trader with id traderId's account.")
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Unable to withdraw due to user input."),
            @ApiResponse(code = 404, message = "traderId is not found.")})
    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    @PutMapping(path = "/withdraw/traderId/{traderId}/amount/{amount}")
    public Account withdrawFund(@PathVariable Integer traderId, @PathVariable Double amount) {
        try {
            return traderAccountService.withdraw(traderId, amount);
        } catch (Exception ex) {
            throw ResponseExceptionUtil.getResponseStatusException(ex);
        }
    }

}
